/**
 * Copyright 2016 Icemic Jia <bingfeng.web@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

BKS {
  Exp
    = LogicBlock*

  LogicBlock
    = IF LogicBlock* (ELSEIF LogicBlock*)* (ELSE LogicBlock*)? END  --IF
    | WHILE LogicBlock* END  --WHILE
    | FOREACH LogicBlock* END  --FOREACH
    | StoryLine                       --Story

  StoryLine
    = "@" command content    --formatA
      | "[" command content "]"    --formatB

  command = key

  content = keyValue " " content --mul
  | keyValue                --base

  keyValue = key "=" value  --param
    | key        --flag

  key = (letter | number | "_")+

  value = string | number | boolean

  string = "\"" doubleQuoteStringContent* "\"" --doubleQuote
      | "\'" singleQuoteStringContent* "\'" --singleQuote

  singleQuoteStringContent = ~("\'" | "\\" ) any  --nonEscaped
      | "\\" escapeCharacter                 --escaped

  doubleQuoteStringContent = ~("\"" | "\\" ) any  --nonEscaped
      | "\\" escapeCharacter                 --escaped

  singleEscapeCharacter = "'"|"\""|"\\"|"b"|"f"|"n"|"r"|"t"|"v"
  escapeCharacter = singleEscapeCharacter | "x" | "u"

  quote = "\"" | "\'"

  boolean = "true" | "false"

  number  (a number)
    = digit* "." digit+  -- fract
    | "0x" hexdigit+        -- hex
    | digit+             -- whole

  hexdigit
    = "a".."f" | "A".."F" | digit

  // Statement = IF | VAR | END | ELSE | WHILE

  IF
    = "#if" ExpressionBlock

  VAR
    = "#var" variable "=" value  --assign1
        | "#var" variable "=" variable  --assign2
        | "#var" variable            --nonAssign

  END
    = "#end"

  ELSE
    = "#else"

  ELSEIF
    = "#elseif" ExpressionBlock

  WHILE
    = "#while" ExpressionBlock

  FOREACH
    = "#foreach" variable "in" variable

  ExpressionBlock
    = BracketExpression booleanOperator ExpressionBlock  --multi
    | BracketExpression                                  --single

  BracketExpression
    = "(" ExpressionBlock ")"   --bracket
    | Expression                --nonBracket

  booleanOperator = "&&" | "||"

  Expression
    = variable operator value     --v2V
    | variable operator variable  --v2v
    | variable                    --v

  variable = (letter | number | "_")+
  operator = "+" | "-" | "*" | "/" | "==" | ">=" | "<=" | ">" | "<"

}
